import logging
import traceback

from envisage.plugin import Plugin
from traits.api import List, Unicode, Bool, Type, Either

from force_bdss.data_sources.base_data_source_factory import \
    BaseDataSourceFactory
from force_bdss.mco.base_mco_factory import BaseMCOFactory
from force_bdss.notification_listeners.base_notification_listener_factory \
    import \
    BaseNotificationListenerFactory
from force_bdss.ui_hooks.base_ui_hooks_factory import BaseUIHooksFactory
from .notification_listeners.i_notification_listener_factory import \
    INotificationListenerFactory
from .ids import ExtensionPointID
from .data_sources.i_data_source_factory import IDataSourceFactory
from .mco.i_mco_factory import IMCOFactory
from .ui_hooks.i_ui_hooks_factory import IUIHooksFactory


logger = logging.getLogger(__name__)


class BaseExtensionPlugin(Plugin):
    """Base class for extension plugins, that is, plugins that are
    provided by external contributors.

    It provides a set of slots to be populated that end up contributing
    to the application extension points. To use the class, simply inherit it
    in your plugin, and then fill the factory_classes trait with the classes
    you want to export. For example::

        class MyPlugin(BaseExtensionPlugin):
            id = plugin_id("enthought", "myplugin")

            factory_classes = [
                MyDataSourceFactory1,
                MyDataSourceFactory2
                ]
    """
    #: Reports if the plugin loaded its factories successfully or not.
    broken = Bool(False)

    #: The error that have been generated by the instantiations.
    error = Unicode()

    #: A list of all the factory classes to export.
    factory_classes = List(
        Either(Type(BaseDataSourceFactory),
               Type(BaseMCOFactory),
               Type(BaseNotificationListenerFactory),
               Type(BaseUIHooksFactory)
        )
    )

    #: A list of available Multi Criteria Optimizers this plugin exports.
    mco_factories = List(
        IMCOFactory,
        contributes_to=ExtensionPointID.MCO_FACTORIES
    )

    #: A list of the available Data Sources this plugin exports.
    data_source_factories = List(
        IDataSourceFactory,
        contributes_to=ExtensionPointID.DATA_SOURCE_FACTORIES
    )

    #: A list of the available notification listeners this plugin exports
    notification_listener_factories = List(
        INotificationListenerFactory,
        contributes_to=ExtensionPointID.NOTIFICATION_LISTENER_FACTORIES
    )

    #: A list of the available ui hooks this plugin exports
    ui_hooks_factories = List(
        IUIHooksFactory,
        contributes_to=ExtensionPointID.UI_HOOKS_FACTORIES
    )

    def _data_source_factories_default(self):
        return self._instantiate_factories(BaseDataSourceFactory)

    def _mco_factories_default(self):
        return self._instantiate_factories(BaseMCOFactory)

    def _notification_listener_factories_default(self):
        return self._instantiate_factories(BaseNotificationListenerFactory)

    def _ui_hooks_factories_default(self):
        return self._instantiate_factories(BaseUIHooksFactory)

    def _instantiate_factories(self, type_):
        if self.broken:
            logger.error(
                "Skipping instantiation of {} due to previous errors.".format(
                    type_.__name__))
            return []

        try:
            return [
                factory(self)
                for factory in self._factory_by_type(type_)
            ]
        except Exception as e:
            self.broken = True
            self.error = traceback.format_exc()
            logger.exception(e)

    def _factory_by_type(self, type_):
        return [cls for cls in self.factory_classes if issubclass(cls, type_)]
